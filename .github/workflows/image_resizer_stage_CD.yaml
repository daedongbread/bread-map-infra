name: image_resizer_stage_CD

on:
  pull_request:
    branches:
      - stage
    types:
      - closed
    paths:
      - 'lambda/image_resizer/**'
      - '!lambda/image_resizer/README.md'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  LAMBDA: stage-image-resizer
  STAGE_BUCKET_NAME: stage-daedong-image-637423658689

jobs:
  upload_zip_to_lambda:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: lambda/image_resizer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make zip
        run: |
          sed -i "s/BUCKET_NAME/${{ env.STGAGE_BUCKET_NAME }}/gi" index.js
          docker build --tag sharp_on_lambda:nodejs20 .
          docker run --name sharp_on_lambda_container sharp_on_lambda:nodejs20
          docker cp sharp_on_lambda_container:/image_resizer.zip .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.STG_AWS_GITHUB_ACTION_ROLE }}
          aws-region: ap-northeast-2

      - name: Upload and Publish Lambda
        id: upload-lambda
        run: |
          aws lambda update-function-code \
          --region us-east-1 \
          --function-name ${{ env.LAMBDA }} \
          --zip-file fileb://image_resizer.zip

          while [[ "$(aws lambda get-function --region us-east-1 --function-name ${{ env.LAMBDA }} --query 'Configuration.LastUpdateStatus')" != "\"Successful\"" ]]; do
            echo "Waiting for function update to complete..."
            sleep 10
          done

          echo "Function update completed."
          
          echo "LAMBDA_ARN=$(
            aws lambda publish-version \
            --region us-east-1 \
            --function-name ${{ env.LAMBDA }} \
            --query 'FunctionArn'\
            --output text
          )" >> $GITHUB_OUTPUT

      - name: Distribute Lambda@Edge
        env:
          LAMBDA_ARN: ${{ steps.upload-lambda.outputs.LAMBDA_ARN }}
        run: |
          aws cloudfront get-distribution-config \
          --id ${{ secrets.STG_IMAGE_CLOUDFRONT_ID }} \
          --output json > distribution-config-with-etag.json

          ETag=$(jq -r '.ETag' distribution-config-with-etag.json)
          jq -r '.DistributionConfig' distribution-config-with-etag.json > distribution-config.json

          jq --arg lambda_arn $LAMBDA_ARN \
          '.DefaultCacheBehavior.LambdaFunctionAssociations.Items[0].LambdaFunctionARN = $lambda_arn' \
          distribution-config.json > modified-config.json

          aws cloudfront update-distribution \
          --id ${{ secrets.STG_IMAGE_CLOUDFRONT_ID }} \
          --if-match $ETag \
          --distribution-config file://modified-config.json
